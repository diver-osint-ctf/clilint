name: "CTF Challenges YAML Linter"
description: "Lint challenges.yaml files for ctfcli with comprehensive validation rules"
author: "clilint"
branding:
  icon: "check-circle"
  color: "green"

inputs:
  directory:
    description: "Directory to lint (default: current directory)"
    required: false
    default: "."

  json-output:
    description: "Output results in JSON format"
    required: false
    default: "false"

  fail-on-error:
    description: "Fail the action if linting errors are found"
    required: false
    default: "true"

outputs:
  result:
    description: "Linting result (success/failure)"
    value: ${{ steps.lint.outputs.result }}

  errors-found:
    description: "Whether any errors were found"
    value: ${{ steps.lint.outputs.errors-found }}

  json-output:
    description: "JSON formatted results"
    value: ${{ steps.lint.outputs.json-output }}

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: "1.21"

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      shell: bash
      run: |
        cd "${{ github.action_path }}"
        go mod download

    - name: Build linter
      shell: bash
      run: |
        cd "${{ github.action_path }}"
        go build -o clilint .

    - name: Run linter
      id: lint
      shell: bash
      run: |
        cd "${{ github.action_path }}"

        LINT_ARGS=""
        if [ "${{ inputs.json-output }}" = "true" ]; then
          LINT_ARGS="--json"
        fi

        TARGET_DIR="${{ inputs.directory }}"
        if [ -z "$TARGET_DIR" ] || [ "$TARGET_DIR" = "." ]; then
          TARGET_DIR="${{ github.workspace }}"
        else
          # Convert relative path to absolute path from workspace
          if [[ ! "$TARGET_DIR" = /* ]]; then
            TARGET_DIR="${{ github.workspace }}/$TARGET_DIR"
          fi
        fi

        echo "Linting directory: $TARGET_DIR"

        # Copy linter to workspace for execution
        cp clilint "${{ github.workspace }}/clilint"
        cd "${{ github.workspace }}"

        if ./clilint $LINT_ARGS "$TARGET_DIR" > lint_output.txt 2>&1; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "errors-found=false" >> $GITHUB_OUTPUT
          echo "✅ Linting passed successfully"
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "errors-found=true" >> $GITHUB_OUTPUT
          echo "❌ Linting failed"
        fi

        # Output results
        echo "Linting output:"
        cat lint_output.txt

        # Set JSON output
        if [ "${{ inputs.json-output }}" = "true" ]; then
          echo "json-output<<EOF" >> $GITHUB_OUTPUT
          cat lint_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "json-output=" >> $GITHUB_OUTPUT
        fi

        # Fail if requested and errors found
        if [ "${{ inputs.fail-on-error }}" = "true" ] && [ "$?" -ne 0 ]; then
          exit 1
        fi
